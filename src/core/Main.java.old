import org.apache.commons.lang3.StringEscapeUtils;
import com.google.common.util.concurrent.FutureCallback;
import de.btobastian.javacord.*;
import de.btobastian.javacord.entities.message.Message;
import de.btobastian.javacord.entities.*;
import de.btobastian.javacord.listener.*;
import de.btobastian.javacord.listener.server.*;
import de.btobastian.javacord.listener.message.MessageCreateListener;
import org.apache.commons.codec.binary.Base64;
import org.apache.commons.codec.binary.Hex;
import org.apache.commons.codec.binary.StringUtils;
import java.security.MessageDigest;
import java.math.*;
import java.util.*;
import java.util.regex.*;
import org.apache.http.client.*;
import org.apache.http.client.entity.*;
import org.apache.http.util.*;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.*;
import org.apache.http.client.methods.*;
import org.apache.http.message.BasicNameValuePair;
import java.net.*;
import java.io.*;
import java.util.stream.Collectors;
import org.json.*;
import org.apache.commons.io.FileUtils;
import java.nio.*;
import java.nio.file.*;
import java.nio.charset.*;
import org.apache.http.entity.StringEntity;
import java.util.*;
import java.util.regex.*;
import java.net.*;
import java.io.*;
import java.nio.charset.*;
import java.text.*;

public class Main { // https://discordapp.com/oauth2/authorize?client_id=334227800003313674&scope=bot&permissions=201849937
    public static List<Channel> channels = new ArrayList<>();
    protected String SITE_URL = ""; // ignore this, this is not how you configure it
    protected String SITE_HASH = "";

    protected List<String> URLS = new ArrayList<>();
    protected boolean ONLINE = true;
    public boolean done = false;

    public static void main(String[] args) {
        new Main("MzM0MjI3ODAwMDAzMzEzNjc0.DItlSA.oxQHL0dzjp3Q7SU7wTpgiqk6Ntg");
    }

    public Main(String token) {
        DiscordAPI api = Javacord.getApi(token, true);
        api.connect(new FutureCallback<DiscordAPI>() {
            @Override
            public void onSuccess(DiscordAPI api) {
                api.setGame("!3301 help");

                for(Server server : api.getServers()) {
                    System.out.println("Connecting to " + server.getName() + "...");
                    /*done = false;
                    server.getInvites(new FutureCallback<Invite[]>() {
                        @Override
                        public void onSuccess(Invite[] ix) {
                            for(Invite i : ix)
                                System.out.println("  - " + i.getInviteUrl());
                            done = true;
                        }

                        @Override
                        public void onFailure(Throwable t) {
                            t.printStackTrace();
                            done = true;
                        }
                    });
                    while(!done) {try {Thread.sleep(2);} catch(Exception e) {e.printStackTrace();}}*/
                }

                try {
                    String file = "channels.txt";
                    try(BufferedReader br = new BufferedReader(new FileReader(new File(file)))) {
                        for(String line; (line = br.readLine()) != null; ) {
                            Channel c = api.getChannelById(line.trim());
                            if(c != null)
                                channels.add(c);
                            else
                                System.out.println("Channel " + line.trim() + " null?");
                        }
                    }
                } catch(Exception e) {
                    log("Failed to parse sites list file!");
                    e.printStackTrace();
                }

                api.registerListener(new MessageCreateListener() {
                    @Override
                    public void onMessageCreate(DiscordAPI api, Message message) {
                        try {
                            String string = handle(message, message.getContent());

                            if(string != null) {
                                String next = "";
                                if(string.length() > 2000) {
                                    next = string.substring(1990);
                                    string = string.substring(0, 1990) + "\n```";
                                }
                                message.reply(string);
                                if(next.length() != 0) {
                                    string = "```" + next;
                                    next = "";
                                    if(string.length() > 2000) {
                                        next = string.substring(1990);
                                        string = string.substring(0, 1990) + "\n```";
                                    }
                                    message.reply(string);
                                    if(next.length() != 0) {
                                        string = "```" + next;
                                        next = "";
                                        if(string.length() > 2000) {
                                            next = string.substring(1990);
                                            string = string.substring(0, 1990) + "\n```";
                                        }
                                        message.reply(string);
                                        if(next.length() != 0) {
                                            string = "```" + next;
                                            next = "";
                                            if(string.length() > 2000) {
                                                next = string.substring(1990);
                                                string = string.substring(0, 1990) + "\n```";
                                            }
                                            message.reply(string);
                                            if(next.length() != 0) {
                                                string = "```" + next;
                                                next = "";
                                                if(string.length() > 2000) {
                                                    next = string.substring(1990);
                                                    string = string.substring(0, 1990) + "\n```";
                                                }
                                                message.reply(string);
                                            }
                                        }
                                    }
                                }

                                    /*
                                    // split into chunks of 2000
                                    List<String> strings = new ArrayList<String>();
                                    int index = 0;
                                    int chunks = 500;
                                    while (index < string.length()) {
                                        strings.add(string.substring(index, Math.min(index + chunks, string.length())));
                                        index += chunks;
                                    }

                                    for(String s : strings) {
                                        message.reply(string);
                                        System.out.println("SENDING CHUNK " + s.length() + ": " + s.substring(0, Math.min(s.length(), 100)));
                                    }
                                } else*/
                            }
                        } catch(Exception e) {
                            e.printStackTrace();
                        }
                    }
                });
            }

            @Override
            public void onFailure(Throwable t) {
                t.printStackTrace();
            }
        });

        api.registerListener(new ServerJoinListener() {
            public void onServerJoin(DiscordAPI api2, Server server) {
                System.out.println("[INFO] Joined server " + server.getName() + " [" + server.getMemberCount() + "]");
            }
        });

        try {
            String file = "sites.txt";
            try(BufferedReader br = new BufferedReader(new FileReader(new File(file)))) {
                for(String line; (line = br.readLine()) != null; ) {
                    if(!line.trim().startsWith("#") && line.length() != 0) { // is it a comment?
                        String[] split = line.split(Pattern.quote(" "));
                        if(split.length < 2)
                            new Main(split[0], 3);
                        else {
                            new Main(split[0], Integer.parseInt(split[1]));
                        }
                    }
                }
            }
        } catch(Exception e) {
            log("Failed to parse sites list file!");
            e.printStackTrace();
        }
    }

    public static void write() {
        try {
            StringBuilder b = new StringBuilder();
            for(Channel c : channels)
                if(c != null)
                    b.append(c.getId() + "\n");

            String str = b.toString();
            File newTextFile = new File("channels.txt");

            FileWriter fw = new FileWriter(newTextFile);
            fw.write(str);
            fw.close();

        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    public Main(String siteurl, int mins) {
        SITE_URL = siteurl;

        // generatePayload("Bot is now online. Checking for updates every 30 minutes...");

        Timer timer = new Timer();
        TimerTask hourlyTask = new TimerTask() {
            @Override
            public void run() {

                String response = http2GET(SITE_URL);

                if(SITE_HASH.length() != 0) {
                    if(!SITE_HASH.equals(MD5(response))) {
                        generatePayload("**Alert:** The website " + SITE_URL + " has been updated!");
                    }
                }

                SITE_HASH = MD5(response);

                List<String> newurls = new ArrayList<>();

                for(String s : scrapeURL(response)) {
                    if(!s.startsWith(SITE_URL) && !s.startsWith("http"))
                        s = SITE_URL + s;

                    newurls.add(s);
                }

                if(URLS.size() != 0) {
                    for(String s : newurls) {
                        if(!URLS.contains(s)) {
                            String ending = getType(s.substring(s.lastIndexOf('.') + 1).trim());
                            String msg = "**Alert:** New " + (ending.length() == 0 ? "" : ending + " ") + "file uploaded at " + s;
                            generatePayload(msg);
                            log(msg);
                        }
                    }
                }

                URLS = newurls;
            }
        };

        timer.schedule(hourlyTask, 0, 1000 * 60 * mins);
    }

    public String http2GET(String urlToRead) { // perform a GET request
        try {
            StringBuilder result = new StringBuilder();
            URL url = new URL(urlToRead);
            URLConnection con = url.openConnection();
            con.setRequestProperty("User-Agent", "Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10.4; en-US; rv:1.9.2.2) Gecko/20100316 Firefox/3.6.2");
            HttpURLConnection conn = (HttpURLConnection) con;
            conn.setRequestMethod("GET");
            BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            String line;
            while ((line = rd.readLine()) != null) {
                result.append(line + "\n");
            }
            rd.close();

            if(!ONLINE)
                generatePayload("**Alert:** " + urlToRead + " is now online!");
            ONLINE = true;

            return result.toString();
        } catch(Exception e) {
            if(ONLINE)
                generatePayload("**Alert:** " + urlToRead + " is now offline!");
            ONLINE = false;
            e.printStackTrace();
            return "";
        }
    }

    public static void log(String args) { // simply write a message to console
        System.out.println("[" + new SimpleDateFormat("MM/dd HH:mm").format(new Date()) + "] " + args);
    }

    public void generatePayload(String message) { // send a message to the discord server
        for(Channel c : channels)
            try {
                c.sendMessage(message);
            } catch(Exception e) {
                e.printStackTrace();
                System.err.println("[ERROR] Message was: " + message);
            }
    }

    public String MD5(String md5) { // collisions and security do not matter in this instance
        try {
            java.security.MessageDigest md = java.security.MessageDigest.getInstance("MD5");
            byte[] array = md.digest(md5.getBytes());
            StringBuffer sb = new StringBuffer();
            for (int i = 0; i < array.length; ++i) {
              sb.append(Integer.toHexString((array[i] & 0xFF) | 0x100).substring(1,3));
           }

           return sb.toString();
        } catch (java.security.NoSuchAlgorithmException e) {
            e.printStackTrace();
        }

        return "";
    }

    public static String handle(String m) {
        return handle(null, m);
    }

    public static String handle(Message message, String m) {
        String[] split = m.split(" ");
        String main = split[0].toLowerCase();
        String ret = null;

        if(main.equals("!3301")) {
            try {
                if(message != null)
                    message.getReceiver().type();
            } catch(Exception e) {
                e.printStackTrace();
            }

            if(split.length == 1) {
                //String[] msgs = {"Wondering what I can do?", "Hello!", "Need some help? No problem!"};
                ret = "Wondering what I can do? Here's the help menu:\n" + handle("!3301 help");
            } else {
                switch(split[1].toLowerCase()) {
                    case "help":
                        ret = "`!3301 help` - Displays this help menu\n"
                        + "`!3301 subscribe` - Subscribe current channel to updates on websites hosted by cicada3301\n"
                        + "`!3301 unsubscribe` - Unsubscribe current channel\n"
                        + "`!3301 base64-encode <string>` - Encodes the given string with base64\n"
                        + "`!3301 base64-decode <string>` - Decodes the given string with base64\n"
                        + "`!3301 hex-encode <string>` - Encodes the given string with hex\n"
                        + "`!3301 hex-decode <string>` - Decodes the given string with hex\n"
                        + "`!3301 morse-encode <string>` - Encodes the given string to Morse code\n"
                        + "`!3301 morse-decode <string>` - Decodes the given string from Morse code\n"
                        + "`!3301 mlk-encrypt <key> <string>` - Encrypt the given string using a key (integer)\n"
                        + "`!3301 rot <amount/all> <string>` - Decode/Encode rot (aka: Caesar/shift cipher)\n"
                        + "`!3301 atbash <string>` - Decode/Encode atbash cipher\n"
                        + "`!3301 read-qr <url>` - Read the data on a QR code at a URL\n"
                        + "`!3301 reverse <string>` - Reverse a string's characters\n"
                        + "`!3301 uppercase <string>` - Make the string uppercase\n"
                        + "`!3301 lowercase <string>` - Make the string lowercase\n"
                        + "`!3301 length <string>` - Calculate the length of a string\n"
                        + "`!3301 is-prime <int>` - Check whether or not the given number is prime\n"
                        + "`!3301 phi <int>` - Calculate ϕ(number)\n"
                        + "`!3301 ascii-art <string>` - Generate ASCII art with the given string\n"
                        + "`!3301 exif <url>` - Display EXIF data (metadata) in a JPEG image\n"
                        + "`!3301 solve-cryptogram <string>` - Attempts to solve cryptograms using the dictionary\n"
                        + "`!3301 hash <algorithm>` - Hash using MD2, MD5, SHA-1, SHA-224, SHA-256, SHA-384, or SHA-512\n"
                        + "`!3301 hashid <string>` - Attempt to identify a hash algorithm from a string\n"
                        + "`!3301 hashcrack <string>` - Attempt to crack MD5 and SHA1 hashes via a rainbow table\n"
                        + "`!3301 get <url>` - Get source code of page (HTTP GET request)\n"
                        + "`!3301 forensics <audio/image> <url>` - Display information about audio or image file\n"
                        + "`Need support or want a feature added? Feel free to message @arinerron#5687`";
                        break;
                    case "subscribe":
                        if(message.isPrivateMessage()) {
                            ret = "```\nSorry, this feature does not work for private messaging.\n```";
                        } else {
                            try {
                                Channel c = message.getChannelReceiver();
                                c.sendMessage("```\nSuccess! This channel has been subscribed to updates on cicada 3301 websites.\n```");
                                channels.add(c);
                                System.out.println("Subscribed channel #" + c.getName());
                                write();
                            } catch(Exception e) {
                                e.printStackTrace();
                                ret = "```\nUh oh, looks like something went wrong.\n```";
                            }
                        }
                        break;
                    case "unsubscribe":
                        if(message.isPrivateMessage()) {
                            ret = "```\nSorry, this feature does not work for private messaging.\n```";
                        } else {
                            try {
                                Channel c = message.getChannelReceiver();
                                c.sendMessage("```\nSuccess! This channel has been unsubscribed.\n```");
                                channels.remove(c);
                                System.out.println("Unsubscribed channel #" + c.getName());
                                write();
                            } catch(Exception e) {
                                e.printStackTrace();
                                ret = "```\nUh oh, looks like something went wrong.\n```";
                            }
                        }
                        break;
                    case "metadata":
                    case "exif":
                        if(split.length >= 3)
                            ret = "```\n" + exif(merge(split, 2)) + "\n```";
                        else
                            ret = "`!3301 exif <url>`";
                        break;
                    case "base64-encode":
                        if(split.length >= 3)
                            ret = "```\n" + base64_encode(merge(split, 2)) + "\n```";
                        else
                            ret = "`!3301 base64-encode <string>`";
                        break;
                    case "base64-decode":
                        if(split.length >= 3)
                            ret = "```\n" + escape(base64_decode(merge(split, 2))) + "\n```";
                        else
                            ret = "`!3301 base64-decode <string>`";
                        break;
                    case "hex-encode":
                        if(split.length >= 3)
                            ret = "```\n" + hex_encode(merge(split, 2)) + "\n```";
                        else
                            ret = "`!3301 hex-encode <string>`";
                        break;
                    case "hex-decode":
                        if(split.length >= 3)
                            ret = "```\n" + escape(hex_decode(merge(split, 2))) + "\n```";
                        else
                            ret = "`!3301 hex-decode <string>`";
                        break;
                    case "encode-morse":
                    case "morse-encode":
                        if(split.length >= 3)
                            ret = "```\n" + morse_encode(merge(split, 2)) + "\n```";
                        else
                            ret = "`!3301 morse-encode <string>`";
                        break;
                    case "decode-morse":
                    case "morse-decode":
                        if(split.length >= 3)
                            ret = "```\n" + escape(morse_decode(merge(split, 2))) + "\n```";
                        else
                            ret = "`!3301 morse-decode <string>`";
                        break;
                    case "reverse":
                        if(split.length >= 3)
                            ret = "```\n" + escape(reverse(merge(split, 2))) + "\n```";
                        else
                            ret = "`!3301 reverse <string>`";
                        break;
                    case "hashid":
                        if(split.length >= 3)
                            ret = "```\nThat hash is most likely one of the following:\n" + getAlgorithms(merge(split, 2)) + "\n```";
                        else
                            ret = "`!3301 hashid <string>`";
                        break;
                    case "solve-cryptogram": // VGMS MS FAUDDK HLMRVDASS
                        if(split.length >= 3)
                            ret = "```\nBest results:\n" + solve(merge(split, 2)) + "\n```";
                        else
                            ret = "`!3301 solve-cryptogram <string>`";
                        break;
                    case "hashcrack":
                        if(split.length >= 3) {
                            String hash = crack(merge(split, 2));
                            ret = "```\n" + (hash.length() == 0 ? "Error: Failed to crack hash." : hash) + "\n```";
                        } else
                            ret = "`!3301 hashcrack <string>`";
                        break;
                    case "uppercase":
                        if(split.length >= 3)
                            ret = "```\n" + escape((merge(split, 2)).toUpperCase()) + "\n```";
                        else
                            ret = "`!3301 uppercase <string>`";
                        break;
                    case "ocr":
                        if(split.length >= 3)
                            try {
                                ret = "```\n" + escape(getOCR(merge(split, 2))) + "\n```";
                            } catch(Exception e) {
                                e.printStackTrace();
                                ret = "```\nError: Failed to perform OCR\n```";
                            }
                        else
                            ret = "`!3301 ocr <url>`";
                        break;
                    case "lowercase":
                        if(split.length >= 3)
                            ret = "```\n" + escape((merge(split, 2)).toLowerCase()) + "\n```";
                        else
                            ret = "`!3301 lowercase <string>`";
                        break;
                    case "length":
                        if(split.length >= 3)
                            ret = "```\n" + merge(split, 2).length() + " characters\n```";
                        else
                            ret = "`!3301 length <string>`";
                        break;
                    case "asciiart":
                    case "ascii-art":
                        if(split.length >= 3)
                            ret = "```\n" + getASCIIArt(merge(split, 2)) + "\n```";
                        else
                            ret = "`!3301 ascii-art <string>`";
                        break;
                    case "get":
                        if(split.length >= 3)
                            ret = "```\n" + httpGET(merge(split, 2)) + "\n```";
                        else
                            ret = "`!3301 get <url>`";
                        break;
                    case "encrypt-mlk":
                    case "mlk-encrypt":
                    case "mlk":
                        if(split.length >= 4)
                            try {
                                String str = merge(split, 3);
                                int key = Integer.parseInt(split[2]);
                                if(split[3].equalsIgnoreCase("--work") || split[3].equalsIgnoreCase("-w")) {
                                    StringBuilder b = new StringBuilder();

                                    String hex = toHex(str);
                                    b.append("Work:\n\n[" + hex + "]\n\n");

                                    String digest = mainfunc(hex);
                                    b.append(digest + "\n\n");

                                    String power = powercrypt(digest, 6);
                                    b.append(power + "\n\n");

                                    power = filter(power);
                                    b.append("Output:\n\n" + power + "\n\n");

                                    ret = "```\n" + b.toString() + "\n```";
                                } else
                                    ret = "```\n" + mlk_encrypt(str, key) + "\n```";
                            } catch(Exception e) {
                                e.printStackTrace();
                                ret = "```\nWarning: Key is not a valid decimal integer.\n" + mlk_encrypt(merge(split, 3), (int)(Math.random() * 6)) + "\n```";
                            }
                        else
                            ret = "`!3301 mlk-encrypt <key> <string>`";
                        break;
                    case "phi":
                        if(split.length >= 3)
                            try {
                                ret = "```\n" + phi(Integer.parseInt(split[2])) + "\n```";
                            } catch(Exception e) {
                                e.printStackTrace();
                            }
                        else
                            ret = "`!3301 phi <number>`";
                        break;
                    case "mlk-decrypt":
                    case "decrypt-mlk":
                        ret = "```\nSorry, I am not currently capable of decrypting MLK. Sorry :(\n```";
                        break;
                    case "analyse":
                    case "analyze":
                    case "forensics":
                        if(split.length >= 4) {
                            boolean con = true;
                            String merged = merge(split, 3);
                            File f = new File("image.png");
                            try {
                                f = download(merged, "image.png");
                                if(f == null)
                                return "```\nError: Access denied\n```";
                            } catch(Exception e) {
                                e.printStackTrace();
                                con = false;
                            }

                            if(f == null || !f.exists() || !con)
                                ret = "```\nError: Failed to access file\n```";
                            else {
                                if(split[2].equalsIgnoreCase("image")) {
                                    ret = "```\n" + execCmd("identify -verbose " + f.getAbsolutePath()).replace("/home/aaron/github/discordbot/", "").replace("Version: ImageMagick 6.7.7-10 2017-07-31 Q16 http://www.imagemagick.org", "").replace("Version: ", "").replace("ImageMagick", "") + "\n```";
                                } else if(split[2].equalsIgnoreCase("audio")) {
                                    ret = "```\n" + execCmd("mediainfo " + f.getAbsolutePath()).replace("/home/aaron/github/discordbot/", "") + "\n```";
                                    // ret = "```\n" + execCmd("mediainfo \"" + merged.replace("\\", "\\\\").replace("$", "\\$").replace("!", "\\!").replace("\"", "\\\"").replace("`", "\\`") + "\"") + "\n```";
                                }

                                f.delete();
                            }
                        } else {
                            ret = "`!3301 forensics <audio/image> <url>`";
                        }
                        break;
                    case "read-qr":
                        if(split.length >= 3) {
                            String merged = merge(split, 2);
                            String content = httpGET("http://api.qrserver.com/v1/read-qr-code/?fileurl=" + URLEncoder.encode(merged));
                            if(content.contains("en: malformed") || content.contains("Error: Failed to ") || content.contains("download error (could not establish connection)"))
                                ret = "```\nError: Failed to read QR code\n```";
                            else {
                                StringBuilder b = new StringBuilder("```\n");

                                JSONArray o = new JSONArray(content);
                                for (int i = 0; i < o.length(); i++) {
                                    JSONObject obj = o.getJSONObject(i);
                                    JSONArray name = obj.getJSONArray("symbol");
                                    for (int ix = 0; ix < name.length(); ix++) {
                                        JSONObject obj2 = name.getJSONObject(ix);
                                        String data = obj2.getString("data");
                                        b.append(data + "\n");
                                    }
                                }

                                b.append("```");
                                ret = b.toString();
                            }
                        } else
                            ret = "`!3301 read-qr <url>`";
                        break;
                    case "hash":
                        if(split.length >= 4) {
                            String merged = merge(split, 3);
                            String[] algorithms = {"MD2", "MD5", "SHA-1", "SHA-224", "SHA-256", "SHA-384", "SHA-512"};
                            List<String> algs = Arrays.asList(algorithms);

                            if(split[2].equalsIgnoreCase("all")) {
                                StringBuilder b = new StringBuilder();
                                b.append("```\n");

                                for(String s : algs) {
                                    b.append(s + ": " + hash(merged, s) + "\n");
                                }

                                b.append("```");

                                ret = b.toString();
                            } else {
                                String alg = split[2].toUpperCase();

                                // help lazy people
                                if(alg.equals("SHA1"))
                                    alg = "SHA-1";
                                else if(alg.equals("SHA224"))
                                    alg = "SHA-224";
                                else if(alg.equals("SHA256"))
                                    alg = "SHA-256";
                                else if(alg.equals("SHA384"))
                                    alg = "SHA-384";
                                else if(alg.equals("SHA512"))
                                    alg = "SHA-512";

                                if(algs.contains(alg)) {
                                    ret = "```\n" + hash(merged, alg) + "\n```";
                                } else {
                                    ret = "```\nError: That algorithm does not exist\n```";
                                }
                            }
                        } else
                            ret = "`!3301 hash <algorithm/all> <string>`";
                        break;
                    case "check-prime":
                    case "prime-check":
                    case "is-prime":
                    case "verify-prime":
                        if(split.length >= 3) {
                            StringBuilder b = new StringBuilder("```\n");
                            for(int i = 2; i < split.length; i++) {
                                try {
                                    // long parse = Long.parseLong(split[i]);
                                    String parse = split[i];
                                    BigInteger bigint = new BigInteger(parse);
                                    if(parse.length() > 12)
                                        b.append("Integer " + parse + " is " + ((bigint).isProbablePrime(5) ? "probably " : "not ") + "prime\n");
                                    else
                                        b.append("Integer " + parse + " is " + (isPrime(bigint) ? "" : "not ") + "prime\n");
                                } catch(Exception e) {
                                    e.printStackTrace();
                                    if(split[i].toLowerCase().contains("rib")) {
                                        return "No, it's not prime ribs :(\nhttp://i.imgur.com/YyhAfNC.gif";
                                    } else {
                                        b.append("Error: Failed to parse integer \"" + split[i] + "\"\n");
                                    }
                                }
                            }
                            b.append("```");
                            ret = b.toString();
                        } else
                            ret = "`!3301 is-prime <int>`";
                        break;
                    case "caesar":
                    case "ceasar":
                    case "shift":
                    case "rot":
                        try {
                            if(split.length >= 4) {
                                if(split[2].equalsIgnoreCase("all")) {
                                    String merged = merge(split, 3);
                                    StringBuilder b = new StringBuilder();
                                    b.append("```\n");

                                    for(int i = 0; i < 26; i++) {
                                        b.append("rot-" + i + " = " + escape(rot(merged, i)) + "\n");
                                    }

                                    b.append("```");

                                    ret = b.toString();
                                } else
                                    ret = "```\n" + escape(rot(merge(split, 3), Integer.parseInt(split[2]))) + "\n```";
                            } else
                                ret = "`!3301 rot <amount/all> <string>`";
                        } catch(Exception e) {
                            ret = "Error: Failed to decode\nSyntax: `!3301 rot <amount/all> <string>`\nExample: `!3301 rot 13 hi there`";
                        }
                        break;
                    case "atbash":
                        if(split.length >= 3) {
                            String merged = merge(split, 2);
                            ret = "```\n" + escape(atbash(merged)).replace("Best results:\nSorry, no quotes found.", "Error: Failed to solve cryptogram") + "\n```";
                        } else
                            ret = "`!3301 atbash <string>`";
                        break;
                    default:
                        ret = "Command not found! Here's the help menu:\n" + handle("!3301 help");
                        break;
                }
            }
            if(ret != null)
                System.out.println("> " + m + "\n" + ret);
        }

        return ret;
    }

    public static String merge(String[] array, int pos) {
        StringBuilder b = new StringBuilder();
        for(int i = pos; i < array.length; i++)
            b.append(array[i]).append((i == array.length - 1 ? "" : " "));
        return b.toString();
    }

    public static String escape(String s) {
        return s; // can't figure out how to sanitize messages :(
    }

    /* FUNCTIONS */

    protected static String REGEX_URL = "\\b(https?|ftp|file)://[-a-zA-Z0-9+&@#/%?=~_|!:,.;]*[-a-zA-Z0-9+&@#/%=~_|]";

    private static final String PLAIN = "abcdefghijklmnopqrstuvwxyz";
    private static final String CIPHER = "zyxwvutsrqponmlkjihgfedcba";

    public static boolean isPrime(BigInteger number) {
        if (!number.isProbablePrime(5))
            return false;

        BigInteger two = new BigInteger("2");
        if (!two.equals(number) && BigInteger.ZERO.equals(number.mod(two)))
            return false;

        for (BigInteger i = new BigInteger("3"); i.multiply(i).compareTo(number) < 1; i = i.add(two)) {
            if (BigInteger.ZERO.equals(number.mod(i)))
                return false;
        }
        return true;
    }

    public static String mlk_encrypt(String s, int key) {
        return filter(powercrypt(mainfunc(toHex(s)), key));
    }

    public static String mainfunc(String input) {
        StringBuilder b = new StringBuilder("[");

        int i = 1;
        for(char c : input.toCharArray()) {

            if(Character.isLetter(c)) {
                b.append("]");

                b.append("+");
                b.append(binary(c));
                b.append("[");

                i = 0;
            } else {
                b.append(c + "");

                if(i > 2) {
                    b.append("][");
                    i = 0;
                }
            }

            i++;
        }

        b.append("]");

        return b.toString().replace("[]", "");
    }

    public static String binary(char s) {
        String binary = Integer.toBinaryString(s);
        if(binary.length() < 8)
            binary = new String(new char[8 - binary.length()]).replace("\0", "0") + binary;
        return binary;
    }

    public static String powercrypt(String enc, int key) {
        int pow = key;

        String newenc = enc;
        for(String s : enc.split(java.util.regex.Pattern.quote("["))) {
            String as = s.split(java.util.regex.Pattern.quote("]"))[0];
            if(as.length() != 0) {
                BigInteger numb = new BigInteger(as);
                BigInteger old = numb;
                if(!numb.isProbablePrime(1))
                    numb = new BigInteger("" + phi(numb.intValue()));
                // System.out.println(old + " -> " + numb + " ^ 6 = " + numb.pow(pow));
                newenc = newenc.replace("[" + as + "]", "[" + numb.pow(pow) + "]");
            }
        }
        return (newenc);
    }

    public static String filter(String s) {
        return s.replace("[", "").replace("]", "");
    }

    public static String toHex(String arg) {
        return String.format("%x", new BigInteger(1, arg.getBytes(/*YOUR_CHARSET?*/)));
    }

    public static int phi(int i) {
        int n = i;
        int result = n;

        for (int p=2; p*p<=n; ++p) {
            if (n % p == 0) {
                while (n % p == 0)
                    n /= p;
                result -= result / p;
            }
        }

        if (n > 1)
            result -= result / n;

        return result;
    }

    public static String exif(String url) {
        try {
            url = url.trim();
            if(url.toLowerCase().startsWith("javascript:") || url.toLowerCase().startsWith("file:") || url.toLowerCase().startsWith("data:"))
                return null;
            if(!url.startsWith("http"))
                url = "http://" + url;

            String content = httpGET("http://www.verexif.com/en/ver.php?foto_file=&foto_url=" + URLEncoder.encode(url));
//System.out.println();
            if(content.contains("<div id=\"datos_foto\">")) {
                content = content.split(Pattern.quote("<div id=\"datos_foto\">"))[1].split(Pattern.quote("<strong id=\"thumbnail\">"))[0].replace("</dt><dd>", "  ").replace("</dd><dt>", "\n").replace("<dl style=\"min-height:200px\"><dt>", "").replace("</dl>", "").replace("</dd>", "").replace(" :   ", ": ");
                return content;
            } else {
                return "Error: Failed to fetch EXIF data";
            }
        } catch(Exception e) {
            e.printStackTrace();
            return "Error: Failed to fetch image";
        }
    }

    public static String getOCR(String s) {
        String resp = "Error: Failed to perform OCR";

        HttpClient httpClient = new DefaultHttpClient();
        HttpPost httpPost = new HttpPost("https://requestb.in/1g3vbfi1");

        httpPost.setHeader("Content-Type", "multipart/form-data; boundary=---------------------------141451259414483480821084668071");
        httpPost.setHeader("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:49.0) Gecko/20100101 Firefox/49.0");
        httpPost.setHeader("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8");
        httpPost.setHeader("Referrer", "http://www.free-ocr.com/");

        try {
            StringEntity xmlEntity = new StringEntity("-----------------------------141451259414483480821084668071\r\nContent-Disposition: form-data; name=\"userfile\"; filename=\"\"\r\nContent-Type: application/octet-stream\r\n\r\n\r\n-----------------------------141451259414483480821084668071\r\nContent-Disposition: form-data; name=\"userfile_url\"\r\n\r\n" + s + "\r\n-----------------------------141451259414483480821084668071\r\nContent-Disposition: form-data; name=\"requiredfile_userfile\"\r\n\r\n1\r\n-----------------------------141451259414483480821084668071\r\nContent-Disposition: form-data; name=\"language[]\"\r\n\r\neng\r\n-----------------------------141451259414483480821084668071\r\nContent-Disposition: form-data; name=\"language[]\"\r\n\r\nfra\r\n-----------------------------141451259414483480821084668071\r\nContent-Disposition: form-data; name=\"language[]\"\r\n\r\ndeu\r\n-----------------------------141451259414483480821084668071\r\nContent-Disposition: form-data; name=\"language[]\"\r\n\r\nrus\r\n-----------------------------141451259414483480821084668071\r\nContent-Disposition: form-data; name=\"language[]\"\r\n\r\nspa\r\n-----------------------------141451259414483480821084668071\r\nContent-Disposition: form-data; name=\"user_screen_width\"\r\n\r\n980\r\n-----------------------------141451259414483480821084668071--\r\n");
            httpPost.setEntity(xmlEntity );
        } catch (Exception e) {
            e.printStackTrace();
        }

        try {
            HttpResponse response = httpClient.execute(httpPost);
            HttpEntity respEntity = response.getEntity();

            if (respEntity != null) {
                String content =  EntityUtils.toString(respEntity);System.out.println(content);

                String c = "http://www.free-ocr.com" + content.split(Pattern.quote("var url = '"))[1].split(Pattern.quote("';"))[0];

                int i = 0;
                while(i < 5) {
                    try {
                        Thread.sleep(3000); // wait 3 secs
                    } catch(Exception e) {
                        e.printStackTrace();
                        i = 10;
                    }

                    String output = httpGET(c + "&tscachebusttamp=" + System.currentTimeMillis());
                    if(!output.contains("__wait__123")) { // lol
                        try {
                            return output.split(Pattern.quote("<textarea id=\"resultarea\" >"))[1].split(Pattern.quote("</textarea><br><br><b>"))[0];
                        } catch(Exception e) {
                            e.printStackTrace();
                        }

                        i = 10;
                    } else
                        i++;
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        return resp;
    }

    public static String getASCIIArt(String s) {
        final String font = "computer";
        try { // fonts: pebbles, computer
            return StringEscapeUtils.unescapeHtml4(httpGET("http://www.network-science.de/ascii/ascii.php?TEXT=" + URLEncoder.encode(s) + "&x=43&y=4&FONT=pebbles&RICH=no&FORM=left&STRE=no&WIDT=70").split(Pattern.quote("<TR><TD><PRE>"))[1].split(Pattern.quote("</PRE>"))[0]);
        } catch(Exception e) {
            e.printStackTrace();
            return "Error: Failed to generate ASCII art";
        }
    }

    public static boolean isPrime(long n) {
        if (n % 2L == 0L)
            return false;
        for(long i = 3L; (long)(i * i) <= n; i += 2L)
            if(n % i == 0L)
                return false;
        return true;
    }

    public static String morse_encode(String s) {
        return new Coder().encode(s).replace("_", "-");
    }

    public static String morse_decode(String s) {
        return new Coder().decode(s.replace("-", "_"));
    }

    public static String atbash(String input) {
        input = input.toLowerCase();
        String cyphered = "";

        for (char c : input.toCharArray()) {
            if(PLAIN.contains(c + "")) {
                int idx = PLAIN.indexOf(c);
                cyphered += CIPHER.toCharArray()[idx];
            } else
                cyphered += c;
        }

        return cyphered;
    }

    public static String execCmd(String cmd) {
        try {
            java.util.Scanner s = new java.util.Scanner(Runtime.getRuntime().exec(cmd).getInputStream()).useDelimiter("\\A");
            return s.hasNext() ? s.next() : "";
        } catch(Exception e) {
            e.printStackTrace();
            return "Error: Failed to get exec cmd";
        }
    }

    public static File download(String url, String file) {
        url = url.trim();
        if(url.toLowerCase().startsWith("javascript:") || url.toLowerCase().startsWith("file:") || url.toLowerCase().startsWith("data:"))
            return null;
        if(!url.startsWith("http"))
            url = "http://" + url;
        try {
            String host = getDomainName(url).toLowerCase();
            if(host.contains("localhost") || host.contains("192.168") || host.contains("127.0"))
                return null;
        } catch(Exception e) {
            e.printStackTrace();
            return null;
        }

        File f = new File(file);

        try {
            f.delete();
            FileUtils.copyURLToFile(new URL(url), f);
        } catch(Exception e) {
            e.printStackTrace();
            return null;
        }

        return f;
    }

    public static String getType(String s) {
        System.out.println(s);
        String ending = s;//String ending = getType(s.substring(s.lastIndexOf('.') + 1).trim());

        switch(ending.toLowerCase()) {
            case "wav":
                return "audio";
            case "mp3":
                return "audio";
            case "jpg":
                return "image";
            case "png":
                return "image";
            case "mov":
                return "movie";
            case "mp4":
                return "movie";
            default:
                return "";
        }
    }

    public static List<String> scrapeURL(String data) {
        List<String> urls = new ArrayList<>();

        Pattern pattern = Pattern.compile(REGEX_URL);
        Matcher matcher = pattern.matcher(data);
        while (matcher.find()) {
            urls.add(matcher.group());
        }

        String[] data2 = data.split(Pattern.quote("src=\""));
        int i = 0;
        for(String s : data2) {
            i++;
            if(i != 1)
                urls.add(s.split(Pattern.quote("\""))[0]);
        }

        data2 = data.split(Pattern.quote("href=\""));
        i = 0;
        for(String s : data2) {
            i++;
            if(i != 1)
                urls.add(s.split(Pattern.quote("\""))[0]);
        }

        List<String> urls2 = urls.stream().distinct().collect(Collectors.toList());

        return urls2;
    }

    public static String httpGET(String url) {
        url = url.trim();
        if(url.toLowerCase().startsWith("javascript:") || url.toLowerCase().startsWith("file:") || url.toLowerCase().startsWith("data:"))
            return "Error: Access denied";
        if(!url.startsWith("http"))
            url = "http://" + url;
        try {
            String host = getDomainName(url).toLowerCase();
            if(host.contains("localhost") || host.contains("192.168") || host.contains("127.0"))
                return "Error: Access denied";
        } catch(Exception e) {
            e.printStackTrace();
            return "Error: Access denied";
        }

        try {
            HttpGet request = new HttpGet(url);
            HttpClient httpClient = new DefaultHttpClient();
            HttpResponse response = httpClient.execute(request);
            HttpEntity entity = response.getEntity();
            String entityContents = EntityUtils.toString(entity);
            return entityContents;
        } catch(Exception e) {
            e.printStackTrace();
            return "Error: Failed to fetch webpage";
        }
    }

    public static String getDomainName(String url) throws URISyntaxException {
        URI uri = new URI(url);
        String domain = uri.getHost();
        return domain.startsWith("www.") ? domain.substring(4) : domain;
    }

    public static String crack(String s) {
        try {
            StringBuilder result = new StringBuilder();
            URL url = new URL("http://crackhash.com/api.php?hash=" + URLEncoder.encode(s));
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            conn.setRequestProperty("User-Agent", "Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10.4; en-US; rv:1.9.2.2) Gecko/20100316 Firefox/3.6.2");
            conn.setRequestMethod("GET");
            BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            String line;
            while ((line = rd.readLine()) != null) {
                result.append(line);
            }
            rd.close();
            String res = result.toString();
            if(res.equals("not found!"))
                res = "";
            return res;
        } catch(Exception e) {
            e.printStackTrace();
            return "";
        }
    }

    public static String solve(String s) {
        String resp = "Error: Failed to solve cryptogram";

        HttpClient httpClient = new DefaultHttpClient();
        HttpPost httpPost = new HttpPost("http://rumkin.com/tools/cipher/cryptogram-solver.php");
        // Request parameters and other properties.
        List<NameValuePair> params = new ArrayList<NameValuePair>();
        params.add(new BasicNameValuePair("text", s));
        params.add(new BasicNameValuePair("dict", "american-english")); //american-english-huge
        try {
            httpPost.setEntity(new UrlEncodedFormEntity(params, "UTF-8"));
        } catch (Exception e) {
            e.printStackTrace();
        }

        try {
            HttpResponse response = httpClient.execute(httpPost);
            HttpEntity respEntity = response.getEntity();

            if (respEntity != null) {
                String content =  EntityUtils.toString(respEntity);

                String c = content.split(Pattern.quote("The Results</h2>"))[1].split(Pattern.quote("<div"))[0].trim();
                resp = c.replace("<br>", "").trim();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        return resp;
    }

    public static String getAlgorithms(String s) {
        String resp = "Error: Failed to identify hash";

        HttpClient httpClient = new DefaultHttpClient();
        HttpPost httpPost = new HttpPost("https://www.onlinehashcrack.com/hash-identification.php#results");
        // Request parameters and other properties.
        List<NameValuePair> params = new ArrayList<NameValuePair>();
        params.add(new BasicNameValuePair("hash", s));
        params.add(new BasicNameValuePair("submit", "Submit"));
        try {
            httpPost.setEntity(new UrlEncodedFormEntity(params, "UTF-8"));
        } catch (Exception e) {
            e.printStackTrace();
        }

        try {
            HttpResponse response = httpClient.execute(httpPost);
            HttpEntity respEntity = response.getEntity();

            if (respEntity != null) {
                String content =  EntityUtils.toString(respEntity);

                String c = content.split(Pattern.quote("<h5>Your hash <i>may</i> be one of the following :</h5>"))[1].split(Pattern.quote("<h5>This identification"))[0].trim();
                resp = c.replace("<br />", "").replace("<p></p>", "").trim();

                StringBuilder builder = new StringBuilder();
                String[] split = resp.split(Pattern.quote("\n"));
                for(String hash : split)
                    if(!hash.contains("(") && !hash.contains(")"))
                        builder.append(hash + "\n");
                resp = builder.toString();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        return resp;
    }

    public static String rot(String s, int e) {
        String[] oldletters = s.split("");
        String[] letters = "abcdefghijklmnopqrstuvwxyz".split("");
        List<String> letters2 = Arrays.asList(letters);
        StringBuilder b = new StringBuilder();
        e = e % 26;

        for(String old : oldletters) {
            if(letters2.contains(old.toLowerCase())) {
                int index = letters2.indexOf(old.toLowerCase());
                String newer = letters[(index + e) % letters.length];
                b.append((Character.isUpperCase(old.charAt(0)) ? newer.toUpperCase() : newer.toLowerCase()));
            } else
                b.append(old);
        }

        return b.toString();
    }

    public static String reverse(String s) {
        return new StringBuilder(s).reverse().toString();
    }

    public static String base64_decode(String s) {
        return StringUtils.newStringUtf8(Base64.decodeBase64(s));
    }

    public static String base64_encode(String s) {
        return Base64.encodeBase64String(StringUtils.getBytesUtf8(s));
    }

    public static String hex_decode(String s) {
        try {
            return new String(Hex.decodeHex(s.replace("-", "").replace(" ", "").toCharArray()));
        } catch(Exception e) {
            return "Error: Failed to decode hex";
        }
    }

    public static String hex_encode(String s) {
        try {
            return new String(Hex.encodeHex(s.getBytes()));
        } catch(Exception e) {
            return "Error: Failed to encode hex";
        }
    }

    public static String hash(String s, String algorithm) {
        try {
            MessageDigest m = MessageDigest.getInstance(algorithm.toUpperCase());
            m.reset();
            m.update(s.getBytes());
            return new BigInteger(1, m.digest()).toString(16).toLowerCase();
        } catch(Exception e) {
            return "Error: Algorithm not found";
        }
    }
}

class Coder {
    private Map <String, String> map = new HashMap<>();

    public Coder() {
        String a = Pattern.quote(" = ");
        try {
            List<String> lines = Files.readAllLines(Paths.get("morse.txt"), Charset.defaultCharset());
            for(String s : lines) {
                String[] split = s.split(a);
                map.put(split[0], split[1]);
            }
        } catch(Exception e) {
            e.printStackTrace();
        }
    }

    public String encode(String str) {
        str = str.toLowerCase();

        StringBuilder builder = new StringBuilder();
        for(String s : str.split("")) {
            if(this.map.containsKey(s))
                builder.append(this.map.get(s)).append(" ");
            else
                builder.append("  ");
        }

        return builder.toString();
    }

    public String decode(String str) {
        str = str.toLowerCase().replace("    ", "  ");;

        StringBuilder builder = new StringBuilder();
        for(String s : str.split(" ")) {
            if(this.map.containsValue(s))
                builder.append(getKeysByValue(this.map, s).iterator().next());
            else
                builder.append(" ");
        }

        return builder.toString();
    }

    public static <T, E> Set<T> getKeysByValue(Map<T, E> map, E value) {
        return map.entrySet()
                  .stream()
                  .filter(entry -> Objects.equals(entry.getValue(), value))
                  .map(Map.Entry::getKey)
                  .collect(Collectors.toSet());
    }
}
